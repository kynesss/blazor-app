@page "/announcements"
@inject HttpClient Http
@using Utils;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "admin")]

<h3>Add custom announcement</h3>

<div class="center">
    <label for="inputValue">URL:</label>
    <input type="text" id="inputValue" @bind="@InputValue"/>

    <br/><br/>
    
    <button @onclick="AddAnnouncement" disabled="@IsRunning">Add Announcement</button>
    
    <br/><br/>
</div>

@if (!string.IsNullOrEmpty(Result))
{
    if (IsRunning)
    {
        <p style="color: black">Result: Running</p>
    }
    else if (IsSuccess)
    {
        <p style="color: green">Result: @Result</p>
    }
    else
    {
        <p style="color: red">Result: @Result</p>
    }
}

@code {
    private static string? InputValue { get; set; }
    private string? Result { get; set; }
    private bool IsRunning { get; set; }
    private bool IsSuccess { get; set; }

    private async Task AddAnnouncement()
    {
        if (string.IsNullOrEmpty(InputValue))
        {
            LogError("Given url is empty!");
            return;
        }

        if (!Utils.IsUrlValid(InputValue))
        {
            LogError("Give url is not valid!");
            return;
        }

        try
        {
            IsRunning = true;
            var response = await Http.GetStringAsync($"/api/AnnouncementFunction?url={InputValue}");
            IsRunning = false;

            LogResponse(response);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            LogError(ex.ToString());
        }
    }

    private void LogError(string message)
    {
        IsSuccess = false;
        Result = message;
    }

    private void LogResponse(string message)
    {
        IsSuccess = true;
        Result = message;
    }

}